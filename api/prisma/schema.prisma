generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  role      Role @default(USER)
  companyId Int?
  company   Company? @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order Order[]
}

model Lookup {
  id        Int      @id @default(autoincrement())
  name      String
  lookupItems LookupItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LookupItem {
  id        Int      @id @default(autoincrement())
  name      String
  lookupId  Int
  lookup    Lookup   @relation(fields: [lookupId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}

model Company {
  id        Int        @id @default(autoincrement())
  name      Json
  address   String?
  users     User[]
  employees Employee[]
  payments  Payment[]
  orders    Order[]
  city      String?
  area      String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Employee {
  id        Int      @id @default(autoincrement())
  name_ar      String?
  name_en      String?
  position  String?
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
  image     String?
  travelers    Traveler[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order Order[]
}



model Order {
  id         Int       @id @default(autoincrement())
  companyId  Int
  userId     Int
  employeeId Int?
  company    Company   @relation(fields: [companyId], references: [id])
  status     OrderStatus
  invoiceId  Int?
  user       User      @relation(fields: [userId], references: [id])
  invoice    Invoice?  @relation(fields: [invoiceId], references: [id])
  amount     Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  employee   Employee? @relation(fields: [employeeId], references: [id])
  orderTravelers OrderTravelers[]
  OrderItem OrderItem[]
}

model OrderItem{
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  quantity  Int
  price     Float
  serviceId Int
  service   service  @relation(fields: [serviceId], references: [id])
  title     String
  description String?
  booking   Booking[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model service{
  id        Int      @id @default(autoincrement())
  name_ar      String
  name_en      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  OrderItem OrderItem[]
}


model Payment{
  id        Int      @id @default(autoincrement())
  invoiceId Int
  invoice   Invoice    @relation(fields: [invoiceId], references: [id])
  companyId Int
  company   Company    @relation(fields: [companyId], references: [id])
  amount    Float
  status    PaymentStatus
  method    PaymentMethod
  date      DateTime
  reference String?
  attachment String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderTravelers {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  travelerId Int
  traveler  Traveler @relation(fields: [travelerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id        Int      @id @default(autoincrement())
  orders     Order[]    
  amount    Float
  payments Payment[]
  dueDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum Role {
  USER
  ADMIN
  COMPANY_ADMIN
}


enum OrderStatus {
  CREATED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum InvoiceStatus {
  CREATED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  CREATED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
CASH
BANK
CARD
}

model Booking {
  id          Int      @id @default(autoincrement())
  travelerId  Int
  traveler    Traveler @relation(fields: [travelerId], references: [id])
  flightId    Int?
  flight      Flight?  @relation(fields: [flightId], references: [id])
  orderItemId     Int?
  orderItem       OrderItem?  @relation(fields: [orderItemId], references: [id])
  hotelId     Int?
  hotel       Hotel?   @relation(fields: [hotelId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}

model Traveler {
  id         Int       @id @default(autoincrement())
  firstName_ar  String
  lastName_ar   String
  firstName_en  String
  lastName_en   String
  email      String
  phone      String
  relationship String
  passport     String?
  employeeId   Int?
  bookings   Booking[]
  Employee Employee[]
  OrderTravelers OrderTravelers[]
}

model Flight {
  id          Int      @id @default(autoincrement())
  flightCode  String
  airlineId   Int
  airline     Airline   @relation(fields: [airlineId], references: [id])
  airportId   Int
  airport     Airport   @relation(fields: [airportId], references: [id])
  Booking Booking[]
}

model Hotel {
  id          Int      @id @default(autoincrement())
  name        String
  city        String
  bookings    Booking[]
}





model Airport {
  id      Int     @id @default(autoincrement())
  code    String
  name    String
  cityId  Int
  city    City     @relation(fields: [cityId], references: [id])
  flights Flight[]
  countryId Int
  country Country  @relation(fields: [countryId], references: [id])
}

model Airline {
  id        Int     @id @default(autoincrement())
  iataCode  String
  name      String

  Flight Flight[]
}

model Country {
  id      Int     @id @default(autoincrement())
  code    String
  name    String
  cities  City[]
  airports Airport[]
}

model City {
  id       Int      @id @default(autoincrement())
  code     String
  name     String
  countryId Int
  airports Airport[]
  country  Country   @relation(fields: [countryId], references: [id])
}
